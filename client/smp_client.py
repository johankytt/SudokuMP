'''
Created on 9. nov 2017

@author: Johan
'''
from common.smp_network import DEFAULT_HOST, DEFAULT_PORT
from client.smp_client_net import SMPClientNet
from common.smp_common import LOG, SMPException
from client.smp_client_gui import SMPClientGui


class SMPClient():
	'''
	classdocs
	'''

	_cid = 0  # Unique client id generated by server. 0 indicates unassigned or invalid.
	_cname = ''  # Player name
	_client_net = None
	_gid = None  # ID of the joined game
	_gui = None

	def __init__(self):
		self._gui = SMPClientGui(self)
		self._gui.show_lobby()


	def connect(self, addr=DEFAULT_HOST, port=DEFAULT_PORT, cname=''):
		''' Creates a SMPClientNet object and connects to the server '''

		LOG.info('SMPClient connecting to {} with name {}.'.format((addr, port), cname))
		self.set_cname(cname)
		if len(self._cname) == 0:
			LOG.warn('Connecting with no player name set')

		self._client_net = SMPClientNet(self)
		try:
			self._client_net.connect(addr, port)
			return True
		except SMPException:
			self._gui.show_notification('Unable to connect to {}:{}'.format(addr, port))
			return False


	def disconnect(self, blocking=False):
		LOG.info('SMPClient disconnect()')
		self._client_net.disconnect()

		# Wait for the network thread to finish
		if blocking and self._client_net.is_alive():
			LOG.info('SMPClient waiting for network thread to finish')
			self._client_net.join()

		self._cid = 0
		self._game = None
		self._client_net = None
		LOG.critical('Check for client disconnect cleanup errors')
		self._gui.notify_disconnect()


	def server_disconnect(self):
		''' Called if the connection has been closed unexpectedly'''

		# TODO: Clean up after server-initiated disconnect
		LOG.critical('SMPClient: clean up after server disconnect UNIMPLEMENTED')
		self._cid = 0
		self._game = None
		self._client_net = None
		self._gui.show_notification('Connection closed unexpectedly')
		self._gui.notify_disconnect()


	def exit(self):
		LOG.info('Client exiting.')
		if self._client_net:
			if self._gid:
				LOG.info('Leaving game.')
				self._client_net.leave_game()

			LOG.info('Disconnecting.')
			self.disconnect(True)


	# Setters / getters

	def set_cid(self, cid):
		LOG.debug('SMPClient: Setting cid={}'.format(cid))
		self._cid = cid

	def set_cname(self, cname):
		if len(cname) >= 255:
			LOG.warn('Given player name is too long, trucated to 255.')
			self._cname = cname[:255]
		self._cname = cname


	# Network Requests
	def create_game(self, max_players):
		if self._client_net:
			self._client_net.req_new_game(max_players)
		else:
			self._gui.show_notification('Not connected to a server.\nCan\'t create a new game.')

	def get_game_list(self):
		self._client_net.req_game_info_list()

	def leave_game(self):
		LOG.critical('Leave game request UNIMPLEMENTED')


	# Network Notifications

	def game_list_received(self, gilist):
		LOG.critical('SMPClient.game_list_received() UNIMPLEMENTED')
		LOG.debug('SMPClient received GLIST: {}'.format(gilist))
		for pil in [gi['playerinfo'] for gi in gilist]:
			for pi in pil:
				LOG.debug(pi)

		self._gui.update_game_list(gilist)

	def game_joined(self, gid):
		LOG.critical('Game joined notification UNIMPLEMENTED')
